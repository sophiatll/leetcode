import java.util.*;
/*
* Worst Case Time Complexity [ Big-O ]: O(n2)
 
Best Case Time Complexity [Big-omega]: O(n)

Average Time Complexity [Big-theta]: O(n2)
*/
class Solution {
  public static void insertSort(int[] a) {
    System.out.println(Arrays.toString(a)); 
    int n = a.length;
    for(int i=1; i<n; i++) { //{1, 2, 3}
      int value = a[i];
      int j = i; 
      while(j>0 && a[j-1]>value){
        a[j] = a[j-1];
        j--;
      }
      a[j] = value; 
    }
    System.out.println("=>"+Arrays.toString(a));
  }
  
  public static void main(String[] args) {
    //case 1: best case O(n)
    int[] a1 = new int[]{1,2,3};
    insertSort(a1);
    //case 2: 
    int[] a2 = new int[]{2,1,3};
    insertSort(a2);
    //case 3: worst case
    int[] a3 = new int[] {3,2,1};
    insertSort(a3);
  }
}
